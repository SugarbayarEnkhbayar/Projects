column(4,box(width = 12,title='Change column name',status = 'primary',solidHeader = T,
varSelectInput('changeColNam','Choose columns',data='',multiple = F),
textInput('NewColNam','Write new column name'),
actionButton('click3','Change'))),
column(4,box(width=12,title='Missing data',status='primary',solidHeader=T,
varSelectInput('MissVal','Choose columns',data='',multiple = F),
actionButton('click4','Show'),
selectInput('MissSelect','Choose Method',choices = c('Remove','Mean','Median','Most_Fre'),selected=NULL,multiple = F),
actionButton('click5','Remove/Fill'),
DTOutput('MissRes'))),
column(4,box(width = 12,title = 'Remove duplicates',status = 'primary',solidHeader = T,
selectInput('DupliSelect','Choose',choices=c('Yes','No'),selected=NULL,multiple=F),
actionButton("click6",'Remove')))
),
fluidRow(
column(4,box(width = 12,title='Group by',status='primary',solidHeader = T,
varSelectInput('SpecVal','Choose columns',data='',multiple = T),
varSelectInput('SpecVal_GR','Choose columns',data='',multiple = F),
selectInput('SelMM','Choose method',choices=c('Mean','Median','Sum','Count'),selected=NULL,multiple=F),
actionButton('click7','Do'),
DTOutput('GroupTable'))),
column(4,box(width=12,title='Outlier',status='primary',solidHeader=T,
varSelectInput('SelColOut','Choose columns',data='',multiple=F),
selectInput('SelMetOut','Choose method',choices=c('IQR','Z score'),selected=NULL,multiple=F),
actionButton('click8','Remove'),
DTOutput('OutTable'))),
column(4,box(width=12,title='Correlation',status='primary',solidHeader=T,
varSelectInput('SelColCor1','Choose columns',data='',multiple=F),
varSelectInput('SelColCor2','Choose columns',data='',multiple=F),
actionButton('click81','Change'),
uiOutput('rescor')))
),
fluidRow(
column(4,box(width = 12,title='Filter',status='primary',solidHeader = T,
varSelectInput('SelColFilt','Choose columns',data='',multiple = T),
textInput('FiltVal','Value:',value = ""),
actionButton('click82'),
DTOutput('resFilt')
))
)
),
tabPanel("Analytical",
fluidPage(
selectInput('SelModel','Choose method',choices=c('Linear Regression','Classification','Cluster'),selected=NULL,multiple=F),
varSelectInput('VarY','Choose Independent variable',data='',multiple=F),
varSelectInput('VarX','Choose Dependent variable',data='',multiple=T),
actionButton('magic','Abracadabra'),
shinycssloaders::withSpinner(verbatimTextOutput('ui1')),
shinycssloaders::withSpinner(verbatimTextOutput('ui2')),
shinycssloaders::withSpinner(verbatimTextOutput('ui3')),
shinycssloaders::withSpinner(verbatimTextOutput('ui4'))
))
),
tabPanel('Visualization',
fluidPage(
fluidRow(
column(4,box(width=12,title='One variable',status='primary',solidHeader = T,
varSelectInput('SelOneVarPlot','Choose column',data='',multiple=F),
selectInput('OneVarTypePlot','Choose type of chart',choices = c('Line','Bar','Pie')),
actionButton('click9','Show'),
plotlyOutput('OnePLT'))),
column(4,box(width=12,title='Two variable',status='primary',solidHeader = T,
varSelectInput('SelTwoVarPlot','Choose column',data='',multiple=T),
selectInput('TwoVarTypePlot','Choose type of chart',choices = c('Scatter')),
actionButton('click10','Show'),
plotlyOutput('TwoPLT'))),
column(4,box(width=12,title='Three variable',status='primary',solidHeader = T,
varSelectInput('SelThrVarPlot','Choose column',data='',multiple=T),
selectInput('ThrVarTypePlot','Choose type of chart',choices = c('3D')),
actionButton('click11','Show'),
rglwidgetOutput('ThrPLT')))
),
fluidRow(
fluidPage(
varSelectInput('IntSelVar','Choose column',data='',multiple = F),
actionButton('click12','Show'),
plotlyOutput('IntPLT'),
DTOutput('IntDT')
)
)
)),
tabPanel('Download',
downloadButton(
'down',
label = "Download",
class = NULL,
icon = shiny::icon("download")
))
)
runApp()
runApp()
runApp()
runApp()
runApp()
df_filter <- new("DataCleaning", data = rv$data)
df_filter <- filterData(df_filter, as.character(input$SelColFilt), input$FiltVal)
runApp()
runApp()
class(df_filter)
x=data.frame(df_filter)
df_filter <- new("DataCleaning", data = rv$data)
df_filter <- filterData(df_filter, as.character(input$SelColFilt), as.integer(input$FiltVal))
runApp()
runApp()
df_filter@data
check=df_filter@data
View(check)
runApp()
runApp()
runApp()
check1=df %>% filter(age=50)
check1=df %>% filter(age==50)
check1=df %>% filter(customer_age=50)
check1=df %>% filter(customer_age==50)
View(check1)
runApp()
runApp()
table(is.na(df_filter$customer_age))
df1=df_filter %>% filter(!is.na(input$FiltVal))
df1=df_filter %>% filter(!!!is.na(input$FiltVal))
df1=df_filter %>% filter(!is.na(!!!input$FiltVal))
df_filter<-df_filter[!is.na(input$FiltVal)]
df_filter<-df_filter[!is.na(input$FiltVal),]
df_filter<-df_filter[,!is.na(input$FiltVal)]
?complete.cases
df_filter$customer_age[1]
df_filter$customer_age[2]
df_filter$customer_age[2]=='NA'
df_filter$customer_age[2]='NA'
is.na(df_filter$customer_age)
check1<-df_filter %>% filter(!is.na(as.character(input$FiltVal)))
check1<-df_filter %>% filter(!is.na(as.character(!!!input$FiltVal)))
input$FiltVal
class(input$FiltVal)
check1<-df_filter %>% filter(!is.na(as.numeric(!!!input$FiltVal)))
df_filter <- new("DataCleaning", data = rv$data)
df_filter <- filterData(df_filter, as.character(input$SelColFilt), as.integer(input$FiltVal))
df_filter<-data.frame(df_filter@data)
check1<-df_filter %>% filter(!is.na(input$FiltVal))
df_filter %>% filter(customer_age=='NA')
df_filter %>% filter(is.null(customer_age))
x=''
x
is.na(x)
knitr::opts_chunk$set(echo = TRUE)
# Create a new instance of the DataFiltering class with some example data
df <- data.frame(name = c("Alice", "Bob", "Charlie", "David"),
age = c(25, 30, 35, 40,50),
salary = c(50000, 60000, 70000, 80000,NA))
# Create a new instance of the DataFiltering class with some example data
df <- data.frame(name = c("Alice", "Bob", "Charlie", "David"),
age = c(25, 30, 35, 40,50),
salary = c(50000, 60000, 70000, 80000,NA))
df <- data.frame(name = c("Alice", "Bob", "Charlie", "David"),
age = c(25, 30, 35, 40,50),
salary = c(50000, 60000, 70000, 80000,NA))
df <- data.frame(name = c("Alice", "Bob", "Charlie", "David",'dork'),
age = c(25, 30, 35, 40,50),
salary = c(50000, 60000, 70000, 80000,NA))
df_filter <- new("DataCleaning", data = df)
# Print the original data
#print(df_filter@data)
# Filter the data based on age
#df_filter <- filterData(df_filter, "age", 35)
# Print the filtered data
print(df_filter@data)
# Filter the data based on salary
df_filter <- filterData(df_filter, "salary", 60000)
# Print the filtered data
print(df_filter@data)
x=df_filter@data
x
runApp()
df<-rv$data %>% filter(!is.na(!!!input$FiltVal))
df_filter <- new("DataCleaning", data = df)
df_filter <- filterData(df_filter, as.character(input$SelColFilt), as.integer(input$FiltVal))
df_filter<-data.frame(df_filter@data)
df<-rv$data %>% filter(!is.na(!!!input$FiltVal))
df_filter <- new("DataCleaning", data = df)
#df<-rv$data %>% filter(!is.na(!!!input$FiltVal))
df_filter <- new("DataCleaning", data = df)
df_filter <- filterData(df_filter, as.character(input$SelColFilt), as.integer(input$FiltVal))
df_filter<-data.frame(df_filter@data)
check1<-df_filter %>% filter(!is.na(input$SelColFilt))
check1<-df_filter %>% filter(!is.na(!!!input$SelColFilt))
runApp()
runApp()
############
install.packages("C:/Users/se456296/Desktop/AutoDataCleanDashboard/Marwan/DataCleaningPackage/datacleaningtoolbox_0.1.0.tar.gz",repos = NULL)
############
#install.packages("C:/Users/se456296/Desktop/AutoDataCleanDashboard/Marwan/DataCleaningPackage/datacleaningtoolbox_0.1.0.tar.gz",repos = NULL)
library(datacleaningtoolbox)
standardize()
############
#install.packages("C:/Users/se456296/Desktop/AutoDataCleanDashboard/Marwan/DataCleaningPackage/datacleaningtoolbox_0.1.0.tar.gz",repos = NULL)
library(datacleaningtoolbox)
############
#install.packages("C:/Users/se456296/Desktop/AutoDataCleanDashboard/Marwan/DataCleaningPackage/datacleaningtoolbox_0.1.0.tar.gz",repos = NULL)
library(datacleaningtoolbox)
############
install.packages("C:/Users/se456296/Desktop/AutoDataCleanDashboard/Marwan/DataCleaningPackage/datacleaningtoolbox_0.1.0.tar.gz",repos = NULL)
library(datacleaningtoolbox)
?datacleaningtoolbox::standardize
data <- data.frame(
var1 = c(1, 2, 3, 4, 5),
var2 = c(6, 7, 8, 9, 10),
var3 = c(11, 12, 13, 14, 15),
var4 = c(16, 17, 18, 19, 20)
)
cleaner <- new("DataCleaning", data = data)
standardize(cleaner, column = c("var1"))
runApp()
removeOutliers()
?removeOutliers
data <- data.frame(
var1 = rnorm(100),
var2 = rnorm(100),
group = sample(c("A", "B"), size = 100, replace = TRUE),
cat1 = sample(c("Yes", "No"), size = 100, replace = TRUE),
cat2 = sample(c("Low", "Medium", "High"), size = 100, replace = TRUE)
)
# create an object of class StatisticalTests
mydata <- new("DataCleaning", data = data)
# perform a t-test comparing var1 between groups A and B
ttest(mydata, "var1", "group")
runApp()
runApp()
runApp()
runApp()
View(df)
df=read.csv('client_csv57.csv',dec=',')
View(df)
df$customer_age[df$customer_age==50]='Tawi'
df=read.csv('client_csv57.csv',dec=',')
df$customer_age[df$customer_age==50]='Tawi'
df %>% filter(customer_age=='Tawi')
df <- as.data.frame(matrix(runif(n=100000, min=1, max=100), nrow=1))
df <- as.data.frame(matrix(runif(n=1, min=1, max=100), nrow=1000))
##########
df <- as.data.frame(matrix(runif(n=1, min=1, max=100), nrow=100000))
View(df)
df <- as.data.frame(matrix(round(runif(n=1, min=1, max=100), 0), nrow=100000))
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=100000))
df$V1[df$V1==50]<-'Tawi'
df %>% filter(V1=='Tawi')
##########
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=1000000))
df$V1[df$V1==50]<-'Tawi'
Sys.time(df$V1[df$V1==50]<-'Tawi')
tic()
df$V1[df$V1==50]<-'Tawi'
toc()
start <- Sys.time()
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - star
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
##########
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=5000000))
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
##########
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=10000000))
start <- Sys.time()
df$V1[df$V1==50]<-'Tawi'
end <- Sys.time()
end - start
View(df)
df=read.csv('client_csv57.csv',dec=',')
View(df)
df[df$customer_salary_range=='40-60K']
df[,df$customer_salary_range=='40-60K']
df$customer_salary_range[,df$customer_salary_range=='40-60K']
df$customer_salary_range[df$customer_salary_range=='40-60K',]
df$customer_salary_range[df$customer_salary_range='40-60K',]
df$customer_salary_range[,df$customer_salary_range='40-60K']
df$customer_salary_range[,df$customer_salary_range='below 40K']
df[,df$customer_salary_range='below 40K']
df[df$customer_salary_range='below 40K',]
df[df$customer_salary_range=='below 40K',]
df=read.csv('client_csv57.csv',dec=',')
df$customer_salary_range[df$customer_salary_range=='below 40K',]<-40000
df$customer_salary_range[df$customer_salary_range=='below 40K',]<-"40000"
##########
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=10000000))
df1=df$V1*10^3/9^2
##########
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=10000000))
start <- Sys.time()
df1=df$V1*10^3/9^2
end <- Sys.time()
end - start #7.6sec
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=10000000))
start <- Sys.time()
df1=df$V1*10^3/9^2
end <- Sys.time()
end - start #7.6sec
df <- as.data.frame(matrix(round(runif(n=500, min=1, max=100), 0), nrow=10000000))
start <- Sys.time()
df1=df$V1*10^3/9^2
end <- Sys.time()
end - start #7.6sec
##########
df=read.csv('client_csv57.csv',dec=',')
df[df$customer_civil_status=='Married']
df[df$customer_civil_status=='Married',]
df$customer_civil_status[df$customer_civil_status=='Married',]=1
##########
df=read.csv('client_csv57.csv',dec=',')
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
df=read.csv('client_csv57.csv',dec=',')
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
df=read.csv('client_csv57.csv',dec=',')
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
df=read.csv('client_csv57.csv',dec=',')
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
df=read.csv('client_csv57.csv',dec=',')
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
df=read.csv('client_csv57.csv',dec=',')
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
df=read.csv('client_csv57.csv',dec=',')
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
df=read.csv('client_csv57.csv',dec=',')
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
df1=cbind(df,df)
df1=rbind(df,df)
df=read.csv('client_csv57.csv',dec=',')
df1=rbind(df,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
df=read.csv('client_csv57.csv',dec=',')
df1=rbind(df,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
df1=rbind(df1,df)
start=Sys.time()
df[df$customer_civil_status == "Married", "customer_civil_status"] <- 1
end=Sys.time()
end-start
View(df)
##########
df=read.csv('client_csv57.csv',dec=',')
df$new<-substr(df$customer_civil_status,1,2)
runApp()
runApp()
library(kernlab)
runApp()
#include <Rcpp.h>
using namespace Rcpp;
##########
df=read.csv('client_csv57.csv',dec=',')
View(df)
strsplit(df$customer_salary_range," ")
c=strsplit(df$customer_salary_range," ")
c
d=c[1]
d=c[[1]]
d=c[1,]
d=c[,1]
d=c[1]
##########
df=read.csv('client_csv57.csv',dec=',')
test_mat<-strsplit(df,split = " ")
df1=matrix(unlist(test_mat),ncol=3,byrow=T)
##########
df=read.csv('client_csv57.csv',dec=',')
test_mat<-strsplit(df$customer_education,split = " ")
df1=matrix(unlist(test_mat),ncol=3,byrow=T)
df1=matrix(unlist(test_mat),ncol=2,byrow=T)
View(df1)
df1=data.frame(unlist(test_mat),ncol=2,byrow=T)
View(df1)
##########
df=read.csv('client_csv57.csv',dec=',')
test_mat<-strsplit(df$customer_education,split = " ")
df1=data.frame(unlist(test_mat),ncol=2,byrow=T)
View(df1)
shiny::runApp()
input$SpecVal
input$SpecVal_GR
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(as.numeric(input$SpecVal_GR)))
rv$data %>% group_byinput$SpecVal) %>% summarize(Mean=mean(input$SpecVal_GR))
rv$data %>% group_by(input$SpecVal) %>% summarize(Mean=mean(input$SpecVal_GR))
rv$data %>% group_by(input$SpecVal) %>% summarize(Mean=mean(input$SpecVal_GR))
input$SpecVal
col1=input$SpecVal
col2=input$SpecVal_GR
rv$data
rv$data %>% group_by(!!input$SpecVal) %>% summarize(Mean=mean(!!input$SpecVal_GR))
input$SpecVal
input$SpecVal[[1]]
input$SpecVal_GR
rv$data %>% group_by(!!input$SpecVal[[1]]) %>% summarize(Mean=mean(!!input$SpecVal_GR))
runApp()
runApp()
input$SpecVal
input$SpecVal_GR
rv$data %>% select(!!!input$SpecVal)
rv$data %>% select(!!!input$SpecVal_GR)
class(rv$data %>% select(!!!input$SpecVal_GR))
rv$data %>% group_by(input$SpecVal) %>% summarize(mean=mean(input$SpecVal_GR))
check=rv$data %>% select(input$SpecVal_GR)
rv$data %>% group_by(input$SpecVal) %>% summarize(mean=mean(input$SpecVal_GR))
rv$data %>% group_by(input$SpecVal) %>% summarize(mean=mean(as.numeric(input$SpecVal_GR)))
shiny::runApp()
input$SpecVal
input$SpecVal_GR
rv$data
x1=rv$data %>% select(input$SpecVal)
x1=rv$data %>% select(!!!input$SpecVal)
x2=rv$data %>% select(!!!input$SpecVal_GR)
rv$data %>% select(!!!input$SpecVal,!!!input$SpecVal_GR)
rv$data %>% select(!!!input$SpecVal,!!!input$SpecVal_GR) %>% group_by(!!input$SpecVal) %>% summarize(mean=mean(!!!input$SpecVal_GR))
dfdf=rv$data %>% select(!!!input$SpecVal,!!!input$SpecVal_GR)
dfGr<-rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR))
dfGr<-rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(as.integer(!!!input$SpecVal_GR)))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(as.integer(!!input$SpecVal_GR)))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(as.integer(input$SpecVal_GR)))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarize(Mean=mean(!!!input$SpecVal_GR)) %>% as.data.frame()
rv$data %>% group_by(!!!input$SpecVal) %>% summarise(Mean=mean(!!!input$SpecVal_GR)) %>% as.data.frame()
rv$data %>% group_by(!!!input$SpecVal) %>% summarise(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(input$SpecVal) %>% summarise(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(input$SpecVal) %>% summarise(Mean=mean(!!!input$SpecVal_GR))
rv$data %>% group_by(!!!input$SpecVal) %>% summarise(Mean=mean(!!!input$SpecVal_GR))
df=rv$data %>% select(!!!input$SpecVal,!!!input$SpecVal_GR)
df %>% group_by(df[,1]) %>% summarize(mean1=mean(df[,2]))
class(df$customer_age)
df[,1]
df %>% group_by(df[,1]) %>% summarize(mean1=mean(as.numeric(df[,2])))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
ttest()
?ttest
runApp()
runApp()
runApp()
?actionButton
shiny::runApp()
runApp()
runApp()
